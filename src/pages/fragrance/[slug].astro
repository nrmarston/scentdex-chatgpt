---
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import type { Fragrance } from "../../types.ts";
export const prerender = false;

const { slug } = Astro.params;

async function loadFragranceBySlug(targetSlug: string): Promise<Fragrance | null> {
  try {
    const brands: { slug: string; name: string }[] = await fetch(
      new URL("/data/brands.json", Astro.url)
    ).then((r) => r.json());

    for (const brand of brands) {
      try {
        const items: Fragrance[] = await fetch(
          new URL(`/data/fragrances-${brand.slug}.json`, Astro.url)
        ).then((r) => r.json());
        const found = items.find((f) => f.slug === targetSlug);
        if (found) return found;
      } catch {
        // Ignore shard fetch errors for individual brands
      }
    }
  } catch {
    // Ignore brands fetch error; handled below with 404
  }
  return null;
}

const fragrance = slug ? await loadFragranceBySlug(slug) : null;
if (!fragrance) {
  Astro.response.status = 404;
}

const genderLabels: Record<string, string> = {
  f: "Feminine",
  m: "Masculine",
  u: "Unisex",
};

const toTitleCase = (value: string) =>
  value
    .split(" ")
    .map((word) => (word ? word[0]?.toUpperCase() + word.slice(1) : word))
    .join(" ");

const detailItems = fragrance
  ? ([
      {
        label: "Year",
        value: Number.isFinite(fragrance.year) ? String(fragrance.year) : null,
      },
      {
        label: "Concentration",
        value: fragrance.concentration || null,
      },
      {
        label: "Gender",
        value: fragrance.gender
          ? genderLabels[fragrance.gender.toLowerCase()] ?? toTitleCase(fragrance.gender)
          : null,
      },
      {
        label: "Country",
        value: fragrance.country_code ? fragrance.country_code.toUpperCase() : null,
      },
      {
        label: "Longevity",
        value: fragrance.longevity ? toTitleCase(fragrance.longevity) : null,
      },
      {
        label: "Sillage",
        value: fragrance.sillage ? toTitleCase(fragrance.sillage) : null,
      },
      fragrance.perfumer_names?.length
        ? { label: "Perfumer(s)", value: fragrance.perfumer_names.join(", ") }
        : null,
      fragrance.notes?.length
        ? { label: "Notes", value: fragrance.notes.join(", ") }
        : null,
    ].filter(Boolean) as { label: string; value: string }[])
  : [];
---
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>{fragrance ? `${fragrance.name} — ${fragrance.brand_name}` : "Not found"}</title>
    {fragrance && (
      <>
        <meta name="description" content={fragrance.description} />
        <link rel="preload" href="/data/brands.json" as="fetch" crossorigin>
      </>
    )}
  </head>
  <body>
    <main class="mx-auto flex w-full max-w-3xl flex-col gap-6 px-4 py-10">
      {fragrance ? (
        <article class="flex flex-col gap-6">
          <a
            class="inline-flex items-center gap-2 text-sm font-medium text-muted-foreground transition hover:text-foreground"
            href="/"
          >
            <span aria-hidden="true">←</span>
            <span>Back</span>
          </a>
          <Card className="border-border/80">
            <CardHeader className="gap-1.5">
              <CardTitle className="text-3xl font-semibold tracking-tight">
                {fragrance.name}
              </CardTitle>
              <CardDescription className="text-base">
                {fragrance.brand_name}
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-8">
              {detailItems.length ? (
                <dl class="grid gap-4 text-sm sm:grid-cols-2">
                  {detailItems.map((item) => (
                    <div class="flex flex-col gap-1" data-detail={item.label}>
                      <dt class="text-xs font-semibold uppercase tracking-wide text-muted-foreground">
                        {item.label}
                      </dt>
                      <dd class="text-base font-medium text-foreground">
                        {item.value}
                      </dd>
                    </div>
                  ))}
                </dl>
              ) : null}
              {fragrance.description ? (
                <div class="space-y-2">
                  <h2 class="text-lg font-semibold tracking-tight">Description</h2>
                  <p class="text-base leading-7 text-muted-foreground">
                    {fragrance.description}
                  </p>
                </div>
              ) : null}
            </CardContent>
          </Card>
        </article>
      ) : (
        <article class="flex flex-col gap-6">
          <a
            class="inline-flex items-center gap-2 text-sm font-medium text-muted-foreground transition hover:text-foreground"
            href="/"
          >
            <span aria-hidden="true">←</span>
            <span>Back</span>
          </a>
          <Card className="border-border/80">
            <CardHeader className="gap-3">
              <CardTitle className="text-2xl font-semibold tracking-tight">
                Fragrance not found
              </CardTitle>
              <CardDescription>
                The requested fragrance could not be located.
              </CardDescription>
            </CardHeader>
          </Card>
        </article>
      )}
    </main>
  </body>
</html>
